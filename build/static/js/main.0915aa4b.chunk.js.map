{"version":3,"sources":["utils/duration/index.js","pomodoro/FocusDuration.js","pomodoro/BreakDuration.js","pomodoro/Timer.js","pomodoro/Pomodoro.js","utils/class-names/index.js","utils/useInterval/index.js","App.js","index.js"],"names":["secondsToDuration","givenSeconds","minutes","Math","floor","toString","padStart","seconds","round","FocusDuration","focusDuration","session","handleIncreaseFocusClick","handleDecreaseFocusClick","className","data-testid","givenMinutes","minutesToDuration","type","disabled","onClick","BreakDuration","breakDuration","handleDecreaseBreakClick","handleIncreaseBreakClick","Timer","remaining","focusing","ariaValue","style","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","Pomodoro","classNameToBoolean","useState","isTimerRunning","setIsTimerRunning","breaking","masterState","setMasterState","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","aria-label","title","prevState","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0915aa4b.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from \"react\";\r\nimport { minutesToDuration } from \"../utils/duration\";\r\nfunction FocusDuration({focusDuration, session, handleIncreaseFocusClick, handleDecreaseFocusClick}){\r\n    return (\r\n    <div className=\"input-group input-group-lg mb-2\">\r\n        <span className=\"input-group-text\" data-testid=\"duration-focus\">\r\n        {/* TODO: Update this text to display the current focus session duration */}\r\n        Focus Duration: {minutesToDuration(focusDuration/60)}\r\n        </span>\r\n        <div className=\"input-group-append\">\r\n        {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\r\n            <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            data-testid=\"decrease-focus\"\r\n            disabled={session? true:false}\r\n            onClick={handleDecreaseFocusClick}\r\n            >\r\n        <span className=\"oi oi-minus\" />\r\n        </button>\r\n      {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-secondary\"\r\n        data-testid=\"increase-focus\"\r\n        disabled={session? true:false}\r\n        onClick={handleIncreaseFocusClick}\r\n      >\r\n        <span className=\"oi oi-plus\" />\r\n      </button>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\nexport default FocusDuration;","import React from \"react\";\r\nimport { secondsToDuration } from \"../utils/duration\";\r\nfunction BreakDuration({breakDuration, session, handleDecreaseBreakClick, handleIncreaseBreakClick}){\r\n    return (\r\n        <div className=\"input-group input-group-lg mb-2\">\r\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\r\n                {/* TODO: Update this text to display the current break session duration */}\r\n                Break Duration: {secondsToDuration(breakDuration)}\r\n              </span>\r\n              <div className=\"input-group-append\">\r\n                {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-secondary\"\r\n                  data-testid=\"decrease-break\"\r\n                  disabled={session? true:false}\r\n                  onClick={handleDecreaseBreakClick}\r\n                >\r\n                  <span className=\"oi oi-minus\" />\r\n                </button>\r\n                {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-secondary\"\r\n                  data-testid=\"increase-break\"\r\n                  disabled={session? true:false}\r\n                  onClick={handleIncreaseBreakClick}\r\n                >\r\n                  <span className=\"oi oi-plus\" />\r\n                </button>\r\n              </div>\r\n            </div>\r\n    )\r\n}\r\nexport default BreakDuration;","import React from \"react\";\r\nimport { secondsToDuration } from \"../utils/duration\";\r\n\r\nfunction Timer({remaining, focusDuration, breakDuration, focusing, session}){\r\n  if(!session) return null;\r\n\r\n  let ariaValue = 0;\r\n\r\n  focusing ? ariaValue = (focusDuration-remaining)/focusDuration*100 : ariaValue = (breakDuration-remaining)/breakDuration*100;\r\n  \r\n    return(\r\n        <div>\r\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n            {focusing? <h2 data-testid=\"session-title\">Focusing for {secondsToDuration(focusDuration)} minutes</h2> : <h2 data-testid=\"session-title\">On Break for {secondsToDuration(breakDuration)} minutes</h2>}\r\n            {/* TODO: Update message below to include time remaining in the current session */}          \r\n            <p className=\"lead\" data-testid=\"session-sub-title\">\r\n              {secondsToDuration(remaining)} remaining\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow={ariaValue.toString()} // TODO: Increase aria-valuenow as elapsed time increases\r\n                style={{ width: `${ariaValue}%` }} // TODO: Increase width % as elapsed time increases\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\nexport default Timer;","import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusDuration from \"./FocusDuration\";\nimport BreakDuration from \"./BreakDuration\";\nimport Timer from \"./Timer\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const defaultState = {\n    focusDuration: 1500,\n    breakDuration: 300,\n    remaining: 1500,\n    focusing: false,\n    breaking: false,\n    session: false\n  }\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [masterState, setMasterState] = useState({...defaultState})\n\n  useInterval(\n    () => {\n      setMasterState({...masterState, remaining: masterState.remaining - 1});\n      // ToDo: Implement what should happen when the timer is running\n      if(masterState.remaining===0 && masterState.focusing===true){\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n        setMasterState({...masterState, remaining:masterState.breakDuration, focusing:false, breaking:true})\n      } else if(masterState.remaining===0 && masterState.breaking===true){\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n        setMasterState({...masterState, remaining:masterState.focusDuration, focusing:true, breaking:false})\n      }\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    if(!(masterState.focusing || masterState.breaking)) setMasterState({...masterState, remaining:masterState.focusDuration, focusing: true, session:true});\n    setIsTimerRunning((prevState) => !prevState);\n  }\n  const handleStopClick = () =>{\n    if(isTimerRunning) setIsTimerRunning((prevState) => !prevState)\n\n    setMasterState({...masterState, focusing: false, breaking: false, session: false})\n  }\n  const handleIncreaseFocusClick = () =>{\n    if(masterState.focusDuration < 3600) setMasterState({...masterState, focusDuration: masterState.focusDuration + 300})\n  }\n  const handleDecreaseFocusClick = () =>{\n    if(masterState.focusDuration > 300) setMasterState({...masterState, focusDuration: masterState.focusDuration - 300})\n  }\n  const handleIncreaseBreakClick = () =>{\n    setMasterState({...masterState, breakDuration: masterState.breakDuration + 60})\n  }\n  const handleDecreaseBreakClick = () =>{\n    if(masterState.breakDuration > 60) setMasterState({...masterState, breakDuration: masterState.breakDuration - 60})\n  }\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <FocusDuration \n          focusDuration={masterState.focusDuration} \n          session={masterState.session} \n          handleDecreaseFocusClick={handleDecreaseFocusClick}\n          handleIncreaseFocusClick={handleIncreaseFocusClick}\n          />\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <BreakDuration \n            breakDuration={masterState.breakDuration} \n            session={masterState.session} \n            handleDecreaseBreakClick={handleDecreaseBreakClick}\n            handleIncreaseBreakClick={handleIncreaseBreakClick}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              title=\"Stop the session\"\n              onClick={handleStopClick}\n              disabled={masterState.session}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <Timer \n      remaining={masterState.remaining} \n      focusDuration={masterState.focusDuration} \n      breakDuration={masterState.breakDuration}\n      focusing={masterState.focusing}\n      session={masterState.session}\n       />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}